
name: Build & Release (Windows)

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write   # needed to create/update releases
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}      # provided automatically
      CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}  # optional
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      # If you provided a base64-encoded PFX in repository secrets (CSC_LINK_B64),
      # this step will decode it to a temp file and set CSC_LINK for electron-builder.
      - name: Prepare code-signing cert (optional)
        if: ${{ secrets.CSC_LINK_B64 != '' }}
        shell: pwsh
        run: |
          $bytes = [Convert]::FromBase64String("${{ secrets.CSC_LINK_B64 }}")
          $pfxPath = "$env:RUNNER_TEMP\codesign.pfx"
          [IO.File]::WriteAllBytes($pfxPath, $bytes)
          echo "CSC_LINK=file:///$pfxPath" >> $env:GITHUB_ENV

      - name: Build Windows and publish to GitHub Releases
        run: npx electron-builder -w --publish always

      - name: Compute SHA256 checksums of built EXEs
        shell: pwsh
        run: |
          $dist = Resolve-Path dist
          $files = Get-ChildItem $dist -Filter *.exe -File
          if ($files.Count -eq 0) {
            Write-Error "No .exe files found in dist/"
          }
          $out = ""
          foreach ($f in $files) {
            $hash = (Get-FileHash $f.FullName -Algorithm SHA256).Hash
            $out += "$($f.Name)  $hash`n"
          }
          $out | Out-File -FilePath "$dist\checksums.txt" -Encoding utf8
          Get-Content "$dist\checksums.txt"

      - name: Fill release notes from template with checksums
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const version = require(path.join(process.env.GITHUB_WORKSPACE, 'package.json')).version;
            const tag = process.env.GITHUB_REF_NAME; // e.g., v1.4.0
            const templatePath = path.join(process.env.GITHUB_WORKSPACE, '.github', 'release_template.md');
            let body = fs.readFileSync(templatePath, 'utf8');
            // Replace $VERSION placeholder
            body = body.replace(/\$VERSION/g, version);
            // Read checksums
            const checksumsPath = path.join(process.env.GITHUB_WORKSPACE, 'dist', 'checksums.txt');
            let sums = '';
            try {
              sums = fs.readFileSync(checksumsPath, 'utf8').trim();
            } catch (e) {
              sums = '(checksums unavailable)';
            }
            body = body.replace('(paste checksum here)', sums);
            // Find release by tag and update the body
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tag
            });
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              body: body
            });
