name: Build & Release (Windows)

on:
  push:
    tags:
      - 'v*'               # run when a tag like v1.5.1 is pushed
  release:
    types: [published]     # ALSO run when you click “Publish release”
  workflow_dispatch:        # manual runs from Actions tab
    inputs:
      tag:
        description: 'Tag to build/publish (e.g., v1.5.1)'
        required: false

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}             # used by upload action
      CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }} # optional (code signing)
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      # If you provided CSC_LINK_B64 (base64 of a .pfx), decode and expose CSC_LINK
      - name: Prepare code-signing cert (optional)
        shell: pwsh
        env:
          CSC_LINK_B64: ${{ secrets.CSC_LINK_B64 }}
        run: |
          if ($env:CSC_LINK_B64) {
            Write-Host "Code signing: decoding PFX from CSC_LINK_B64"
            $bytes = [Convert]::FromBase64String($env:CSC_LINK_B64)
            $pfxPath = "$env:RUNNER_TEMP\codesign.pfx"
            [IO.File]::WriteAllBytes($pfxPath, $bytes)
            "CSC_LINK=file:///$pfxPath" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          } else {
            Write-Host "No CSC_LINK_B64 provided; building unsigned artifacts."
          }

      - name: Resolve tag name
        id: tag
        shell: bash
        run: |
          if [ -n "${GITHUB_REF_NAME}" ]; then
            echo "tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          elif [ -n "${{ github.event.release.tag_name }}" ]; then
            echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          elif [ -n "${{ github.event.inputs.tag }}" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "No tag name found"; exit 1
          fi

      # Build but DO NOT auto-publish; we’ll upload ourselves
      - name: Build Windows (installer + portable)
        run: npx electron-builder -w --publish never

      - name: Compute SHA256 checksums
        shell: pwsh
        run: |
          $dist = Resolve-Path dist
          $files = Get-ChildItem $dist -Filter *.exe -File
          if ($files.Count -eq 0) { Write-Error "No .exe files found in dist/" }
          $out = ""
          foreach ($f in $files) {
            $hash = (Get-FileHash $f.FullName -Algorithm SHA256).Hash
            $out += "$($f.Name)  $hash`n"
          }
          $out | Out-File -FilePath "$dist\checksums.txt" -Encoding utf8
          Get-Content "$dist\checksums.txt"

      - name: Generate release notes from template
        shell: pwsh
        run: |
          $tmpl = Get-Content ".github/release_template.md" -Raw
          $ver  = (Get-Content package.json -Raw | ConvertFrom-Json).version
          $tmpl = $tmpl -replace '\$VERSION', $ver
          $sums = Get-Content "dist\checksums.txt" -Raw
          if (-not $sums) { $sums = '(checksums unavailable)' }
          $tmpl = $tmpl -replace '\(paste checksum here\)', $sums
          $tmpl | Out-File "dist\release_body.md" -Encoding utf8

      - name: Upload assets & set release notes
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          body_path: dist/release_body.md
          files: |
            dist/*.exe
            dist/*.blockmap
            dist/latest.yml
          fail_on_unmatched_files: true
          draft: false
          prerelease: false
