name: Build & Release (Windows)

on:
  push:
    tags:
      - 'v*'              # run when you push a tag like v1.5.1
  release:
    types: [published]    # also run when you click "Publish release"
  workflow_dispatch: {}   # allow manual runs from Actions tab

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}          # provided automatically
      CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}  # optional (for signing)
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      # Decode base64 PFX only if the secret exists (signing optional)
      - name: Prepare code-signing cert (optional)
        shell: pwsh
        env:
          CSC_LINK_B64: ${{ secrets.CSC_LINK_B64 }}
        run: |
          if ($env:CSC_LINK_B64) {
            Write-Host "Code signing: decoding PFX from CSC_LINK_B64"
            $bytes = [Convert]::FromBase64String($env:CSC_LINK_B64)
            $pfxPath = "$env:RUNNER_TEMP\codesign.pfx"
            [IO.File]::WriteAllBytes($pfxPath, $bytes)
            "CSC_LINK=file:///$pfxPath" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          } else {
            Write-Host "No CSC_LINK_B64 provided; building unsigned artifacts."
          }

      - name: Build Windows and publish to GitHub Releases
        run: npx electron-builder -w --publish always

      - name: Compute SHA256 checksums of built EXEs
        shell: pwsh
        run: |
          $dist = Resolve-Path dist
          $files = Get-ChildItem $dist -Filter *.exe -File
          if ($files.Count -eq 0) { Write-Error "No .exe files found in dist/" }
          $out = ""
          foreach ($f in $files) {
            $hash = (Get-FileHash $f.FullName -Algorithm SHA256).Hash
            $out += "$($f.Name)  $hash`n"
          }
          $out | Out-File -FilePath "$dist\checksums.txt" -Encoding utf8
          Get-Content "$dist\checksums.txt"

      - name: Fill release notes from template with checksums
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // version from package.json
            const version = require(path.join(process.env.GITHUB_WORKSPACE, 'package.json')).version;

            // tag name for both triggers (push/release)
            const tag =
              (process.env.GITHUB_REF_NAME && process.env.GITHUB_REF_NAME.startsWith('v')
                ? process.env.GITHUB_REF_NAME
                : (context.payload.release && context.payload.release.tag_name));

            const templatePath = path.join(process.env.GITHUB_WORKSPACE, '.github', 'release_template.md');
            let body = fs.readFileSync(templatePath, 'utf8');

            // Replace $VERSION placeholder
            body = body.replace(/\$VERSION/g, version);

            // Insert checksums
            const sumsPath = path.join(process.env.GITHUB_WORKSPACE, 'dist', 'checksums.txt');
            let sums = '(checksums unavailable)';
            try { sums = fs.readFileSync(sumsPath, 'utf8').trim(); } catch {}

            body = body.replace('(paste checksum here)', sums);

            // Update the release body for this tag
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag
            });

            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              body
            });
