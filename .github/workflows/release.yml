name: Build & Release (Windows)

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build/publish (e.g., v1.5.5)'
        required: false

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies (lockfile-aware)
        shell: pwsh
        run: |
          if (Test-Path package-lock.json) {
            npm ci
          } else {
            npm install --package-lock-only --no-audit --no-fund
            npm ci
          }

      - name: Prepare code-signing cert (optional)
        shell: pwsh
        env:
          CSC_LINK_B64: ${{ secrets.CSC_LINK_B64 }}
        run: |
          if ($env:CSC_LINK_B64) {
            $bytes = [Convert]::FromBase64String($env:CSC_LINK_B64)
            $pfxPath = "$env:RUNNER_TEMP\codesign.pfx"
            [IO.File]::WriteAllBytes($pfxPath, $bytes)
            "CSC_LINK=file:///$pfxPath" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          } else {
            Write-Host "No CSC_LINK_B64 provided; building unsigned."
          }

      - name: Resolve tag name
        id: tag
        shell: bash
        run: |
          if [ -n "${GITHUB_REF_NAME}" ]; then
            echo "tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          elif [ -n "${{ github.event.release.tag_name }}" ]; then
            echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          elif [ -n "${{ github.event.inputs.tag }}" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "No tag name found"; exit 1
          fi

      - name: Verify icon.png is ≥256×256
        shell: pwsh
        run: |
          $p = "assets\icon.png"
          if (!(Test-Path $p)) { Write-Error "assets/icon.png missing"; exit 1 }
          Add-Type -AssemblyName System.Drawing
          $img = [System.Drawing.Image]::FromFile($p)
          if ($img.Width -lt 256 -or $img.Height -lt 256) { Write-Error "assets/icon.png must be at least 256x256" }
          Write-Host "icon.png OK: $($img.Width)x$($img.Height)"

      - name: Build Windows (installer + portable)
        run: npx electron-builder -w --publish never

      - name: Show dist tree (debug)
        shell: bash
        run: |
          echo "==== dist ===="
          ls -lah dist || true
          echo "==== dist (recursive) ===="
          find dist -maxdepth 3 -type f -print || true

      - name: Compute SHA256 checksums
        shell: pwsh
        run: |
          $dist = Resolve-Path dist
          $files = Get-ChildItem $dist -Recurse -Include *.exe -File
          if ($files.Count -eq 0) {
            Write-Host "No .exe files found. Here is dist content:"
            Get-ChildItem $dist -Recurse -File | ForEach-Object { Write-Host $_.FullName }
            Write-Error "No .exe files found anywhere under dist/"
          }
          $out = ""
          foreach ($f in $files) {
            $hash = (Get-FileHash $f.FullName -Algorithm SHA256).Hash
            $rel  = Resolve-Path -Relative $f.FullName
            $out += "$rel  $hash`n"
          }
          $out | Out-File -FilePath "$dist\checksums.txt" -Encoding utf8
          Get-Content "$dist\checksums.txt"

      - name: Generate release notes from template
        shell: pwsh
        run: |
          $tmpl = Get-Content ".github/release_template.md" -Raw
          $ver  = (Get-Content package.json -Raw | ConvertFrom-Json).version
          $tmpl = $tmpl -replace '\$VERSION', $ver
          $sums = Get-Content "dist\checksums.txt" -Raw
          if (-not $sums) { $sums = '(checksums unavailable)' }
          $tmpl = $tmpl -replace '\(paste checksum here\)', $sums
          $tmpl | Out-File "dist\release_body.md" -Encoding utf8

      - name: Delete conflicting assets for this tag
        uses: actions/github-script@v7
        with:
          script: |
            const tag = core.getInput('tag') || (process.env.GITHUB_REF_NAME || '').trim();
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Which filenames we might re-upload each release
            const keep = new Set([
              'latest.yml',
              // installers are versioned, so they rarely clash, but keep for safety:
              `AiSHA-Hub-Browser-${require('./package.json').version}-Setup.exe`,
              `AiSHA-Hub-Browser-${require('./package.json').version}-Portable.exe`,
              `AiSHA-Hub-Browser-${require('./package.json').version}-Setup.exe.blockmap`,
            ]);

            // Find the release by tag
            const rel = await github.rest.repos.getReleaseByTag({ owner, repo, tag });
            const assets = await github.paginate(
              github.rest.repos.listReleaseAssets,
              { owner, repo, release_id: rel.data.id, per_page: 100 }
            );

            // Delete only assets we know we’ll re-upload (especially latest.yml)
            for (const a of assets) {
              if (a.name === 'latest.yml' || keep.has(a.name)) {
                core.info(`Deleting existing asset: ${a.name} (${a.id})`);
                await github.rest.repos.deleteReleaseAsset({ owner, repo, asset_id: a.id });
              }
            }


      # --- DEBUG: show everything we built ---
      - name: Show dist tree (final)
        shell: bash
        run: |
          echo "==== dist (full list) ===="
          find dist -type f -maxdepth 3 -print
          echo "==== installers found ===="
          find dist -type f -name "*Setup*.exe" -print || true
          echo "==== portables found ===="
          find dist -type f -name "*Portable*.exe" -print || true



      # --- Upload everything explicitly ---
      - name: Upload assets & set release notes
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          body_path: dist/release_body.md
          files: |
            dist/*Setup*.exe
            dist/*Portable*.exe
            dist/**/*.blockmap
            dist/**/latest.yml
            dist/*Setup*.zip
          overwrite_files: true
          fail_on_unmatched_files: false
          draft: false
          prerelease: false



